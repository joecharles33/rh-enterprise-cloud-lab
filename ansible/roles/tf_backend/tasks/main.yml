---
- name: Assert required vars
  ansible.builtin.assert:
    that:
      - (tf_state_bucket | length) > 0
      - (tf_lock_table | length) > 0
      - (aws_region | length) > 0

- name: Check if S3 bucket exists
  ansible.builtin.command:
    cmd: aws s3api head-bucket --bucket "{{ tf_state_bucket }}"
  register: head_bucket
  failed_when: false
  changed_when: false

- name: Set fact - bucket exists
  ansible.builtin.set_fact:
    bucket_exists: "{{ head_bucket.rc == 0 }}"

- name: Check if DynamoDB table exists
  ansible.builtin.command:
    cmd: aws dynamodb describe-table --table-name "{{ tf_lock_table }}" --region "{{ aws_region }}"
  register: desc_table
  failed_when: false
  changed_when: false

- name: Set fact - table exists
  ansible.builtin.set_fact:
    table_exists: "{{ desc_table.rc == 0 }}"

# Purge versioned bucket (if exists and forced)
- name: Empty versioned bucket completely (versions + delete markers)
  ansible.builtin.shell: |
    set -euo pipefail
    command -v jq >/dev/null 2>&1 || { echo "jq is required"; exit 1; }
    B="{{ tf_state_bucket }}"
    while true; do
      OUT="$(aws s3api list-object-versions --bucket "$B" --output json || true)"
      COUNT="$(echo "$OUT" | jq -r '.Versions[]?, .DeleteMarkers[]? | @base64' | wc -l | tr -d ' ')"
      if [ "${COUNT:-0}" = "0" ]; then
        break
      fi
      TMP="$(mktemp)"
      echo '{"Objects":[' > "$TMP"
      FIRST=1
      echo "$OUT" | jq -r '.Versions[]?, .DeleteMarkers[]? | "\(.Key)\t\(.VersionId)"' | \
      while IFS=$'\t' read -r KEY VID; do
        if [ $FIRST -eq 1 ]; then FIRST=0; else echo "," >> "$TMP"; fi
        printf '{"Key":%s,"VersionId":%s}' "$(jq -Rn --arg k "$KEY" '$k')" "$(jq -Rn --arg v "$VID" '$v')" >> "$TMP"
      done
      echo '], "Quiet": true}' >> "$TMP"
      aws s3api delete-objects --bucket "$B" --delete "file://$TMP" >/dev/null
      rm -f "$TMP"
    done
    aws s3 rm "s3://$B" --recursive >/dev/null 2>&1 || true
  when: bucket_exists and force_recreate
  changed_when: bucket_exists and force_recreate

- name: Delete S3 bucket (if exists and forced)
  ansible.builtin.command:
    cmd: aws s3api delete-bucket --bucket "{{ tf_state_bucket }}" --region "{{ aws_region }}"
  when: bucket_exists and force_recreate
  changed_when: bucket_exists and force_recreate

# DynamoDB deletion (if exists and forced)
- name: Delete DynamoDB table (if exists and forced)
  ansible.builtin.command:
    cmd: aws dynamodb delete-table --table-name "{{ tf_lock_table }}" --region "{{ aws_region }}"
  when: table_exists and force_recreate
  changed_when: table_exists and force_recreate

- name: Wait until DynamoDB table is deleted
  ansible.builtin.command:
    cmd: aws dynamodb wait table-not-exists --table-name "{{ tf_lock_table }}" --region "{{ aws_region }}"
  when: table_exists and force_recreate
  changed_when: false

# Create S3 bucket (region-aware us-east-1)
- name: Create S3 bucket
  ansible.builtin.command: >
    {{ 'aws s3api create-bucket --bucket ' ~ tf_state_bucket ~ ' --region ' ~ aws_region
       if aws_region == 'us-east-1'
       else 'aws s3api create-bucket --bucket ' ~ tf_state_bucket ~ ' --region ' ~ aws_region
            ~ ' --create-bucket-configuration LocationConstraint=' ~ aws_region }}
  register: create_bucket
  failed_when: create_bucket.rc not in [0]
  changed_when: create_bucket.rc == 0

- name: Enable versioning
  ansible.builtin.command: >
    aws s3api put-bucket-versioning
    --bucket "{{ tf_state_bucket }}"
    --versioning-configuration Status=Enabled
  changed_when: true

- name: Enforce SSE (AES256)
  ansible.builtin.command: >
    aws s3api put-bucket-encryption
    --bucket "{{ tf_state_bucket }}"
    --server-side-encryption-configuration
    '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
  changed_when: true

- name: Block all public access
  ansible.builtin.command: >
    aws s3api put-public-access-block
    --bucket "{{ tf_state_bucket }}"
    --public-access-block-configuration
    '{"BlockPublicAcls":true,"IgnorePublicAcls":true,"BlockPublicPolicy":true,"RestrictPublicBuckets":true}'
  changed_when: true

# Create DynamoDB lock table
- name: Create DynamoDB lock table
  ansible.builtin.command: >
    aws dynamodb create-table
    --table-name "{{ tf_lock_table }}"
    --attribute-definitions AttributeName=LockID,AttributeType=S
    --key-schema AttributeName=LockID,KeyType=HASH
    --billing-mode PAY_PER_REQUEST
    --region "{{ aws_region }}"
  register: create_table
  failed_when: create_table.rc not in [0]
  changed_when: create_table.rc == 0

- name: Wait until DynamoDB table exists
  ansible.builtin.command: >
    aws dynamodb wait table-exists
    --table-name "{{ tf_lock_table }}"
    --region "{{ aws_region }}"
  changed_when: false

- name: Next steps
  ansible.builtin.debug:
    msg: |
      Backend ready. Initialize Terraform like:
        terraform -chdir=terraform/envs/dev init \
          -backend-config="bucket={{ tf_state_bucket }}" \
          -backend-config="key=envs/dev/terraform.tfstate" \
          -backend-config="region={{ aws_region }}" \
          -backend-config="dynamodb_table={{ tf_lock_table }}" \
          -backend-config="encrypt=true"
